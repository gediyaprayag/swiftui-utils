extension DocumentSnapshot {
    func decode<T: Decodable>(as objectType: T.Type, includingId: Bool = true) throws -> T {
        print("decoding snapshot for ", T.self)
        do {
            guard var documentJson = self.data() else {throw DocumentSnapshotExtensionError.decodingError}
            if includingId {
                print("setting ID on document to", self.documentID)
                documentJson["id"] = self.documentID
            }
            
            //transform any values in the data object as needed
            documentJson.forEach { (key: String, value: Any) in
                switch value{
                case let ref as DocumentReference:
                    print("document ref path", ref.path)
                    documentJson.removeValue(forKey: key)
                    break
                case let ts as Timestamp: //convert timestamp to date value
                    print("converting timestamp to date for field \(key)")
                    let date = ts.dateValue()
                    
                    let jsonValue = Int((date.timeIntervalSince1970 * 1000).rounded())
                    documentJson[key] = jsonValue
                    
                    print("set \(key) to \(jsonValue)")
                    break
                default:
                    break
                }
            }
            
            print("getting doucument data")
            let documentData = try JSONSerialization.data(withJSONObject: documentJson, options: [])
            print("Got document data, decoding into object", documentData)
            
            let decoder = JSONDecoder()
            decoder.dateDecodingStrategy = .millisecondsSince1970
            
            let decodedObject = try decoder.decode(objectType, from: documentData)
            print("finished decoding DocumentSnapshot", decodedObject)
            return decodedObject
        } catch {
            print("failed to decode", error)
            throw error
        }
        
    }
}
